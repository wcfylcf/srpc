set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -g -Wall -fshort-wchar -fwide-exec-charset=UTF-16LE -m64")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -Wall -O2 -fshort-wchar -fwide-exec-charset=UTF-16LE -m64")
set(OUTPUT_BIN_DIR ${PROJECT_SOURCE_DIR}/build/linux/bin)
set(OUTPUT_LIB_DIR ${PROJECT_SOURCE_DIR}/build/linux/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${OUTPUT_BIN_DIR})
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${OUTPUT_LIB_DIR})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${OUTPUT_LIB_DIR})

message("CMAKE_CURRENT_SOURCE_DIR : ${CMAKE_CURRENT_SOURCE_DIR}")
message("CMAKE_CURRENT_BINARY_DIR : ${CMAKE_CURRENT_BINARY_DIR}")
set(CMAKE_INCLUDE_CURRENT_DIR ON)

message("CMAKE_CURRENT_SOURCE_DIR : ${CMAKE_CURRENT_SOURCE_DIR}")
message("CMAKE_CURRENT_BINARY_DIR : ${CMAKE_CURRENT_BINARY_DIR}")
message("PROJECT_SOURCE_DIR : ${PROJECT_SOURCE_DIR}")
message("CMAKE_SOURCE_DIR: ${CMAKE_SOURCE_DIR}")
#find_path(INC_PATH *.h DOC "get include file path" ${PROJECT_SOURCE_DIR}/include/atomic)
message(STATUS "----${INC_PATH}")
#include_directories(AFTER|BEFORE|SYSTEM ${PROJECT_SOURCE_DIR}/include)
#include_directories(${PROJECT_SOURCE_DIR}/include/atomic)
#include_directories(${PROJECT_SOURCE_DIR}/include/template)

#file(GLOB_RECURSE MAIN_INC "${PROJECT_SOURCE_DIR}/include/*.h")#RELATIVE ${PROJECT_SOURCE_DIR} 
#message(STATUS "main inc--${MAIN_INC}")
# file(GLOB MAIN_CPP "${PROJECT_SOURCE_DIR}/src/main.cpp")
#list(APPEND MAIN_CPP ${MAIN_INC})
#message(STATUS "main cpp-----${MAIN_CPP}")

function(include_sub_directories_recurseively root_dir)
    if(IS_DIRECTORY ${root_dir})
        include_directories(${root_dir})
    endif()
    file(GLOB ALL_SUB RELATIVE ${root_dir} ${root_dir}/*)
    foreach(sub ${ALL_SUB})
        if(IS_DIRECTORY ${root_dir}/${sub} AND (NOT ("${sub}" STREQUAL ".svn")))
            include_sub_directories_recurseively(${root_dir}/${sub})
        endif()
    endforeach()
endfunction()

function(print_dir dirs)
    foreach(dir ${dirs})
        message(STATUS "dir='${dir}'")
    endforeach()
endfunction()

#get_property(dirs DIRECTORY ${CMAKE_SOURCE_DIR} PROPERTY INCLUDE_DIRECTORIES)
get_property(dirs DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY INCLUDE_DIRECTORIES)
message(">>> include_dirs=${dirs}")

#include_directories(${CMAKE_CURRENT_BINARY_DIR} ${PROJECT_SOURCE_DIR})
# include_sub_directories_recurseively(${CMAKE_SOURCE_DIR}/include)
# message("CMAKE_SOURCE_DIR: ${CMAKE_SOURCE_DIR}")

#get_property(dirs1 DIRECTORY ${CMAKE_SOURCE_DIR} PROPERTY INCLUDE_DIRECTORIES)
get_property(dirs1 DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY INCLUDE_DIRECTORIES)
#print_dir(dirs1)
message(">>> include_dirs=${dirs1}")

find_package(Protobuf REQUIRED)
include_directories(${Protobuf_INCLUDE_DIRS})
message("---PROTOBUF_PROTOC_EXECUTABLE:${PROTOBUF_PROTOC_EXECUTABLE}")

set(EXE_NAME main)
add_subdirectory(${Test_Name})